{"version":3,"sources":["routes/index.js","screens/home/index.js","routes/publicRoute.js","routes/protectedRoute.js","App.js","serviceWorker.js","store/auth/actionTypes.js","store/auth/reducer.js","store/rootReducer.js","store/configureStore.js","index.js"],"names":["protectedRoutes","publicRoutes","path","exact","component","process","PublicRoute","Component","rest","render","props","Fragment","App","map","route","idx","Boolean","window","location","hostname","match","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_REGISTER_ERROR","initialState","registerLoading","isAuthenticated","signupErrors","user","authReducer","state","action","type","payload","appReducer","combineReducers","randomReducer","rootReducer","undefined","persistConfig","key","storage","middleware","thunk","persistedReducer","persistReducer","configureStore","store","createStore","applyMiddleware","persistor","persistStore","ReactDOM","StrictMode","loading","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2NAUA,IAAMA,EAAkB,GAClBC,EAAe,CACnB,CACEC,KAAM,IACNC,OAAO,EACPC,UCXW,WAKb,OAAO,8BAAMC,+B,eCaAC,EAVK,SAAC,GAAuC,IAA1BC,EAAyB,EAApCH,UAAyBI,EAAW,6BACzD,OACE,cAAC,IAAD,2BACMA,GADN,IAEEC,OAAQ,SAACC,GAAD,OACN,cAAC,IAAMC,SAAP,UAAiB,cAACJ,EAAD,eAAeG,WCKzBJ,EAVK,SAAC,GAAuC,IAA1BC,EAAyB,EAApCH,UAAyBI,EAAW,6BACzD,OACE,cAAC,IAAD,2BACMA,GADN,IAEEC,OAAQ,SAACC,GAAD,OACN,cAAC,IAAMC,SAAP,UAAiB,cAACJ,EAAD,eAAeG,W,MCgBzBE,MAzBf,WACE,OACE,cAAC,IAAD,UACE,eAAC,IAAD,WACGZ,EAAgBa,KAAI,SAACC,EAAOC,GAAR,OACnB,cAAC,EAAD,CACEb,KAAMY,EAAMZ,KACZC,MAAOW,EAAMX,MACbC,UAAWU,EAAMV,WACZW,MAGRd,EAAaY,KAAI,SAACC,EAAOC,GAAR,OAChB,cAAC,EAAD,CAEEb,KAAMY,EAAMZ,KACZC,MAAOW,EAAMX,MACbC,UAAWU,EAAMV,WAHZW,YCVGC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,2BClBOC,EAAwB,wBACxBC,EAAwB,wBACxBC,EAAsB,sBCI7BC,EAAe,CACnBC,iBAAiB,EACjBC,iBAAiB,EACjBC,aAAc,GACdC,KAAM,IA8BOC,EA3BK,WAAmC,IAAlCC,EAAiC,uDAAzBN,EAAcO,EAAW,uCAC5CC,EAAkBD,EAAlBC,KAAMC,EAAYF,EAAZE,QAEd,OAAQD,GACN,KAAKX,EACH,OAAO,2BACFS,GADL,IAEEH,aAAc,GACdF,iBAAiB,IAGrB,KAAKH,EACH,OAAO,2BACFQ,GADL,IAEEL,iBAAiB,IAErB,KAAKF,EACH,OAAO,2BACFO,GADL,IAEEL,iBAAiB,EACjBE,aAAcM,IAGlB,QACE,OAAOH,IClCPI,EAAaC,YAAgB,CACjCC,kBAUaC,EAPK,SAACP,EAAOC,GAI1B,MAHoB,WAAhBA,EAAOC,OACTF,OAAQQ,GAEHJ,EAAWJ,EAAOC,I,yBCJrBQ,EAAgB,CACpBC,IAAK,OACLC,aAEIC,EAAa,CAACC,KAKpB,IAAMC,EAAmBC,YAAeN,EAAeF,GASxCS,EAPQ,WACrB,IAAIC,EAAQC,YAAYJ,EAAkBK,IAAe,WAAf,EAAmBP,IAG7D,MAAO,CAAEK,QAAOG,UAFAC,YAAaJ,K,gBCX/B,EAA6BD,IAArBC,EAAR,EAAQA,MAAOG,EAAf,EAAeA,UAEfE,IAAS3C,OACP,cAAC,IAAM4C,WAAP,UACE,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,IAAD,CAAaO,QAAS,KAAMJ,UAAWA,EAAvC,SACE,cAAC,EAAD,UAINK,SAASC,eAAe,SLgHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.bcee53c1.chunk.js","sourcesContent":["/*\r\n * Created Date: Tuesday May 11th 2021\r\n * Author: Amir Dorgham\r\n * -----\r\n * Last Modified: Tuesday, May 11th 2021, 4:35:36 pm\r\n * Modified By: Amir Dorgham\r\n * -----\r\n */\r\nimport home from \"screens/home\";\r\n\r\nconst protectedRoutes = [];\r\nconst publicRoutes = [\r\n  {\r\n    path: \"/\",\r\n    exact: true,\r\n    component: home,\r\n  },\r\n];\r\nexport { publicRoutes, protectedRoutes };\r\n","import React from \"react\";\n// import React, { useState } from \"react\";\n// import { useSelector, useDispatch } from \"react-redux\";\n\nexport default function Home() {\n  // const count = useSelector((state) => state);\n  // const dispatch = useDispatch();\n  // const [state, setState] = useState({});\n\n  return <div>{process.env.REACT_APP_API_URL}</div>;\n}\n","/*\r\n * Created Date: Tuesday May 11th 2021\r\n * Author: Amir Dorgham\r\n * -----\r\n * Last Modified: Tuesday, May 11th 2021, 4:37:53 pm\r\n * Modified By: Amir Dorgham\r\n * -----\r\n */\r\n\r\nimport React from \"react\";\r\nimport { Route } from \"react-router-dom\";\r\n\r\nconst PublicRoute = ({ component: Component, ...rest }) => {\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) => (\r\n        <React.Fragment>{<Component {...props} />}</React.Fragment>\r\n      )}\r\n    />\r\n  );\r\n};\r\nexport default PublicRoute;\r\n","/*\r\n * Created Date: Tuesday May 11th 2021\r\n * Author: Amir Dorgham\r\n * -----\r\n * Last Modified: Tuesday, May 11th 2021, 4:39:07 pm\r\n * Modified By: Amir Dorgham\r\n * -----\r\n */\r\n\r\nimport React from \"react\";\r\nimport { Route } from \"react-router-dom\";\r\n\r\nconst PublicRoute = ({ component: Component, ...rest }) => {\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) => (\r\n        <React.Fragment>{<Component {...props} />}</React.Fragment>\r\n      )}\r\n    />\r\n  );\r\n};\r\nexport default PublicRoute;\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch } from \"react-router-dom\";\nimport { publicRoutes, protectedRoutes } from \"routes\";\nimport PublicRoute from \"./routes/publicRoute\";\nimport ProtectedRoute from \"./routes/protectedRoute\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        {protectedRoutes.map((route, idx) => (\n          <ProtectedRoute\n            path={route.path}\n            exact={route.exact}\n            component={route.component}\n            key={idx}\n          />\n        ))}\n        {publicRoutes.map((route, idx) => (\n          <PublicRoute\n            key={idx}\n            path={route.path}\n            exact={route.exact}\n            component={route.component}\n          />\n        ))}\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","export const USER_REGISTER_REQUEST = \"USER_REGISTER_REQUEST\";\r\nexport const USER_REGISTER_SUCCESS = \"USER_REGISTER_SUCCESS\";\r\nexport const USER_REGISTER_ERROR = \"USER_REGISTER_ERROR\";\r\n","import {\r\n  USER_REGISTER_REQUEST,\r\n  USER_REGISTER_SUCCESS,\r\n  USER_REGISTER_ERROR,\r\n} from \"./actionTypes\";\r\n\r\nconst initialState = {\r\n  registerLoading: false,\r\n  isAuthenticated: false,\r\n  signupErrors: [],\r\n  user: {},\r\n};\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case USER_REGISTER_REQUEST:\r\n      return {\r\n        ...state,\r\n        signupErrors: [],\r\n        registerLoading: true,\r\n      };\r\n\r\n    case USER_REGISTER_SUCCESS:\r\n      return {\r\n        ...state,\r\n        registerLoading: false,\r\n      };\r\n    case USER_REGISTER_ERROR:\r\n      return {\r\n        ...state,\r\n        registerLoading: false,\r\n        signupErrors: payload,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default authReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport randomReducer from \"./auth/reducer\";\r\n\r\nconst appReducer = combineReducers({\r\n  randomReducer,\r\n});\r\n\r\nconst rootReducer = (state, action) => {\r\n  if (action.type === \"LOGOUT\") {\r\n    state = undefined;\r\n  }\r\n  return appReducer(state, action);\r\n};\r\n\r\nexport default rootReducer;\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport { createLogger } from \"redux-logger\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./rootReducer\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport { persistStore, persistReducer } from \"redux-persist\";\r\n\r\nconst persistConfig = {\r\n  key: \"root\",\r\n  storage,\r\n};\r\nconst middleware = [thunk];\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  middleware.push(createLogger());\r\n}\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nconst configureStore = () => {\r\n  let store = createStore(persistedReducer, applyMiddleware(...middleware));\r\n  let persistor = persistStore(store);\r\n\r\n  return { store, persistor };\r\n};\r\n\r\nexport default configureStore;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport configureStore from \"./store/configureStore\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nconst { store, persistor } = configureStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}